{"ast":null,"code":"import _toConsumableArray from \"/home/rohit/BLOCKCHAIN/social-network/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/home/rohit/BLOCKCHAIN/social-network/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/rohit/BLOCKCHAIN/social-network/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/rohit/BLOCKCHAIN/social-network/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/home/rohit/BLOCKCHAIN/social-network/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/rohit/BLOCKCHAIN/social-network/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/home/rohit/BLOCKCHAIN/social-network/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/rohit/BLOCKCHAIN/social-network/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/rohit/BLOCKCHAIN/social-network/src/components/App.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport './App.css';\nimport Navbar from './Navbar';\nimport SocialNetwork from '../abis/SocialNetwork.json';\nimport Main from './Main';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.loadWeb3();\n      this.loadBlockChainData();\n    }\n  }, {\n    key: \"setStateContract\",\n    value: function () {\n      var _setStateContract = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var web3, accounts, networkId, networkData, socialNetwork;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                web3 = window.web3;\n                _context.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context.sent;\n                this.setState({\n                  account: accounts[0]\n                }); //fetch networkId\n\n                _context.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context.sent;\n                networkData = SocialNetwork.networks[networkId]; //console.log(networkId)\n                //fetch address\n\n                if (!networkData) {\n                  _context.next = 16;\n                  break;\n                }\n\n                _context.next = 12;\n                return web3.eth.Contract(SocialNetwork.abi, networkData.address);\n\n              case 12:\n                socialNetwork = _context.sent;\n                //console.log(socialNetwork)\n                this.setState({\n                  socialNetwork: socialNetwork\n                }); //left side is constructor's socialNetwork\n\n                _context.next = 17;\n                break;\n\n              case 16:\n                window.alert('SocialNetwork contract is not deployed to detected network');\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function setStateContract() {\n        return _setStateContract.apply(this, arguments);\n      }\n\n      return setStateContract;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function loadWeb3() {\n      if (window.ethereum) {\n        window.web3 = new Web3(window.ethereum);\n        window.ethereum.enable();\n      } else if (window.web3) {\n        window.web3 = new Web3(window.web3.currentProvider);\n      } else {\n        window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n      }\n    }\n  }, {\n    key: \"getPostsOnCreation\",\n    value: function () {\n      var _getPostsOnCreation = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var postCount, post;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.setStateContract();\n\n              case 2:\n                _context2.next = 4;\n                return this.state.socialNetwork.methods.postCount().call();\n\n              case 4:\n                postCount = _context2.sent;\n                this.setState({\n                  postCount: postCount\n                });\n                _context2.next = 8;\n                return this.state.socialNetwork.methods.posts(postCount).call();\n\n              case 8:\n                post = _context2.sent;\n                this.setState({\n                  posts: [].concat(_toConsumableArray(this.state.posts), [post])\n                });\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getPostsOnCreation() {\n        return _getPostsOnCreation.apply(this, arguments);\n      }\n\n      return getPostsOnCreation;\n    }()\n  }, {\n    key: \"loadBlockChainData\",\n    value: function () {\n      var _loadBlockChainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var postCount, i, post;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.setStateContract();\n\n              case 2:\n                _context3.next = 4;\n                return this.state.socialNetwork.methods.postCount().call();\n\n              case 4:\n                postCount = _context3.sent;\n                console.log(\"1 time \" + postCount);\n                this.setState({\n                  postCount: postCount\n                });\n                i = 1;\n\n              case 8:\n                if (!(i <= postCount)) {\n                  _context3.next = 16;\n                  break;\n                }\n\n                _context3.next = 11;\n                return this.state.socialNetwork.methods.posts(i).call();\n\n              case 11:\n                post = _context3.sent;\n                this.setState({\n                  posts: [].concat(_toConsumableArray(this.state.posts), [post])\n                });\n\n              case 13:\n                i++;\n                _context3.next = 8;\n                break;\n\n              case 16:\n                // console.log({posts : this.state.posts})\n                this.setState({\n                  loading: false\n                });\n\n              case 17:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockChainData() {\n        return _loadBlockChainData.apply(this, arguments);\n      }\n\n      return loadBlockChainData;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.createPost =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(content) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _this.setState({\n                  loading: true\n                });\n\n                _this.state.socialNetwork.methods.createPost(content).send({\n                  from: _this.state.account\n                },\n                /*#__PURE__*/\n                function () {\n                  var _ref2 = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee4(err, txh) {\n                    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                      while (1) {\n                        switch (_context4.prev = _context4.next) {\n                          case 0:\n                            if (!err) {\n                              _context4.next = 4;\n                              break;\n                            }\n\n                            console.log(err);\n                            _context4.next = 10;\n                            break;\n\n                          case 4:\n                            console.log(txh);\n                            _context4.next = 7;\n                            return _this.getPostsOnCreation();\n\n                          case 7:\n                            _context4.next = 9;\n                            return console.log(\"creatingPost \" + _this.state.postCount);\n\n                          case 9:\n                            _this.setState({\n                              loading: false\n                            });\n\n                          case 10:\n                          case \"end\":\n                            return _context4.stop();\n                        }\n                      }\n                    }, _callee4);\n                  }));\n\n                  return function (_x2, _x3) {\n                    return _ref2.apply(this, arguments);\n                  };\n                }());\n\n              case 2:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.tipPost =\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7(id, tipAmount) {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _this.setState({\n                  loading: true\n                });\n\n                _this.state.socialNetwork.methods.tipPost(id).send({\n                  from: _this.state.account,\n                  value: tipAmount\n                },\n                /*#__PURE__*/\n                function () {\n                  var _ref4 = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee6(err, txh) {\n                    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n                      while (1) {\n                        switch (_context6.prev = _context6.next) {\n                          case 0:\n                            if (!err) {\n                              _context6.next = 4;\n                              break;\n                            }\n\n                            console.log(err);\n                            _context6.next = 8;\n                            break;\n\n                          case 4:\n                            console.log(txh);\n                            _context6.next = 7;\n                            return _this.loadBlockChainData();\n\n                          case 7:\n                            _this.setState({\n                              loading: false\n                            });\n\n                          case 8:\n                          case \"end\":\n                            return _context6.stop();\n                        }\n                      }\n                    }, _callee6);\n                  }));\n\n                  return function (_x6, _x7) {\n                    return _ref4.apply(this, arguments);\n                  };\n                }());\n\n              case 2:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      return function (_x4, _x5) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    _this.state = {\n      account: '',\n      socialNetwork: null,\n      postCount: 0,\n      posts: [],\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(Navbar, {\n        account: this.state.account,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }), this.state.loading ? React.createElement(\"div\", {\n        id: \"loader\",\n        className: \"text-center mt-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, \"Loading...\")) : React.createElement(Main, {\n        posts: this.state.posts,\n        createPost: this.createPost,\n        tipPost: this.tipPost,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/rohit/BLOCKCHAIN/social-network/src/components/App.js"],"names":["React","Component","Web3","Navbar","SocialNetwork","Main","App","loadWeb3","loadBlockChainData","web3","window","eth","getAccounts","accounts","setState","account","net","getId","networkId","networkData","networks","Contract","abi","address","socialNetwork","alert","ethereum","enable","currentProvider","setStateContract","state","methods","postCount","call","posts","post","console","log","i","loading","props","createPost","content","send","from","err","txh","getPostsOnCreation","tipPost","id","tipAmount","value"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport './App.css';\nimport Navbar from './Navbar';\nimport SocialNetwork from '../abis/SocialNetwork.json';\nimport Main from './Main';\n\n\nclass App extends Component {\n\n     componentDidMount(){\n         this.loadWeb3()\n         this.loadBlockChainData()\n    }\n\n async setStateContract(){\n    const web3 = window.web3\n    const accounts = await web3.eth.getAccounts()\n    this.setState({  account : accounts[0] })\n    //fetch networkId\n    const networkId = await web3.eth.net.getId()\n    const networkData = SocialNetwork.networks[networkId]\n    //console.log(networkId)\n    //fetch address\n    if(networkData)\n    {\n       const socialNetwork = await web3.eth.Contract(SocialNetwork.abi,networkData.address)\n       //console.log(socialNetwork)\n       this.setState({    socialNetwork : socialNetwork })  //left side is constructor's socialNetwork\n   }\n   else {\n       window.alert('SocialNetwork contract is not deployed to detected network')\n   }\n}\n\n  loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n       window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async getPostsOnCreation(){\n\n      await this.setStateContract()\n\n      const postCount = await this.state.socialNetwork.methods.postCount().call()\n      this.setState({postCount: postCount })\n\n          const post = await this.state.socialNetwork.methods.posts(postCount).call()\n          this.setState({\n              posts : [...this.state.posts,post]\n          })\n\n  }\n\n  async loadBlockChainData(){\n\n         await this.setStateContract()\n         const postCount = await this.state.socialNetwork.methods.postCount().call()\n         console.log(\"1 time \"+postCount)\n         this.setState({postCount: postCount })\n\n         for(var i = 1;i<=postCount;i++)\n         {\n             const post = await this.state.socialNetwork.methods.posts(i).call()\n             this.setState({\n                 posts : [...this.state.posts,post]\n             })\n         }\n                // console.log({posts : this.state.posts})\n          this.setState({ loading : false })\n\n  }\n\n  createPost = async (content) => {\n      this.setState({ loading : true })\n    this.state.socialNetwork.methods.createPost(content).send({ from: this.state.account },\n    async  (err,txh)=> {\n       if(err)\n       {\n           console.log(err)\n       }\n       else {\n           console.log(txh)\n           await this.getPostsOnCreation()\n           await console.log(\"creatingPost \"+this.state.postCount)\n           this.setState({ loading : false })\n\n       }\n   })\n\n }\n\n tipPost = async (id,tipAmount) => {\n     this.setState({ loading : true })\n    this.state.socialNetwork.methods.tipPost(id).send({ from: this.state.account , value : tipAmount},\n       async  (err,txh)=> {\n          if(err)\n          {\n              console.log(err)\n          }\n          else {\n              console.log(txh)\n              await this.loadBlockChainData()\n              this.setState({ loading : false })\n          }\n      } )\n\n}\n\n\n\n  constructor(props)\n  {\n      super(props)\n      this.state = {\n          account : '',\n          socialNetwork : null,\n          postCount : 0,\n          posts : [],\n          loading : true\n      }\n\n\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar account = {this.state.account}/>\n     {this.state.loading\n            ? <div id=\"loader\" className=\"text-center mt-5\"><p>Loading...</p></div>\n            :\n            <Main\n            posts = {this.state.posts}\n            createPost={this.createPost}\n            tipPost={this.tipPost}\n            />\n         }\n        </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}